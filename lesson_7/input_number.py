# имя + параметры/аргументы = сигнатура функции
def get_user_float(comment: str) -> float:
    """
        # Первая строчка (может быть больше одной строчки) - описание обязанностей функции, что мы от неё ожидаем
    Отвечает за считывание ввода пользователя и преобразования его в десятичное число (float)

        # Остальные строки - это описание входных параметров и что на выходе
    :param comment: обращение к пользователю, комментарий к смыслу вводимого числа
    :return: введенное пользователем число
    """
    # внутри функции - локальная область видимости
    while True:
        try:
            z = input(comment)
            return float(z)
        except Exception:
            print('Число!!!')


def get_user_int(comment: str, lower_bound: int = -10000000) -> int:
    """
    Отвечает за считывание, обработку и преобразование ответа пользователя в целое число int
    :param comment: обращение к пользователю
    :param lower_bound: нижнее допустимое значение, по умолчанию -10000000
    :return: считанное у пользователя число
    """
    # внутри функции - локальная область видимости
    while True:
        try:
            z = int(input(comment))
            if z > lower_bound:
                return int(z)
            else:
                print(f'Мы ожидаем число не меньше {lower_bound}')
        except Exception:
            print(f'Мы ожидаем число!')


MY_VAR = 'Python variable'

print('not main code', __name__)

# Весь код в Пайтон файлах должен иметь одну из 4 форм:
# 1. Внутри функции
# 2. Внутри main-конструкции: "if __name__ == '__main__':"
# 3. Импорт код
# 4. Объявление констант
# Весь остальной код на деле некорректен и его нужно куда-то засунуть.

# Пример обычного пайтон файла:
# импорты
# объявление констант
# объявление функций
# main-конструкция и основная логика в ней


def my_function(x):
    pass


if __name__ == '__main__':
    print('Main code')

