# Алгоритмическое программирование (в вертикаль, по простому)
# Функции (выделение некоторых повторяющихся частей кода в закрытые функции)
# Модульное (выделение группы файлов с функциями/переменными в закрытые модули)
#   ООП (Наследование, Полиморфизм, Инкапсуляция)
# Для понимания наследования/суперклассов:
#   1. Научиться их читать (узнавать в коде и понимать почему работает так, а не иначе)
#   2. Практиковаться
#   3. Изучить методы SOLID

def replace(self, old, new):
    return self.replace(old, new)


# то что перед точкой - пайтон ставит ПЕРВЫМ аргументом метода: SELF
if __name__ == '__main__':
    s = '\n asdAsD  '
    f = s.lower().replace('s', 'f').strip()

    print(replace(s, 's', 'f'))


    print(s)
    print(f)


# main
# создать объект класса, в котором функция
# вызываем функцию и передаём туда список
# функция - часть другого класса
